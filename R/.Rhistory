install.packages("tidyverse")
library(combinat)
#library(combinat)
library(datasets)
install.package("combinat")
install.package(combinat)
install.packages("mcsm")
download.package("mcsm")
update.packages() # Actualizar todos los paquetes
library()
install.packages("mcsm")
install.packages("combinat")
library(combinat)
library(datasets)
library(combinat)
library(datasets)
install.package("mcsm")
install.packages("mcsm")
download.packages("mcsm")
download.packages("mcsm")
library(combinat)
library(datasets)
library(mcsm)
library(combinat)
library(datasets)
library(mcsm)
library(combinat)
library(datasets)
library(mcsm)
library(mcsm)
library(mcsm)
download.packages("mcsm")
install.packages("mcsm")
download.packages("mcsm")
install.packages("mcsm")
install.packages("mcsm")
#library() function show the available packages
library()
#Packages are installed with install.packages("package name")
#Packages are called with the library function()
library(combinat)
library(datasets)
library(MASS)
library(coda)
library(mcsm)
#Packages are installed with install.packages("package name")
#Packages are called with the library function()
library(combinat)
library(datasets)
library(MASS)
library(coda)
library(mcsm)
#Function c() concatenates objects together, it can concatenate number
#as well as other vectors
a<-c(10, 20, 20, 10)
#Function str() show the structure of an object
str(a)
#Function c() concatenates objects together, it can concatenate number
#as well as other vectors
a<-c(10, 20, 20, 10)
#Function str() show the structure of an object
a; str(a)
#Function c() concatenates objects together, it can concatenate number
#as well as other vectors
a<-c(10, 20, 20, 10)
#Function str() show the structure of an object
a; str(a)
rm(a)
#Function c() concatenates terms together, it can concatenate number
#as well as other vectors
a<-c(10, 20, 20, 10)
#Function str() show the structure of an object
a; str(a)
rm(a)
#Boolean operators for equality is ==
a == a
#Function c() concatenates terms together, it can concatenate number
#as well as other vectors
a<-c(10, 20, 20, 10)
#Function str() show the structure of an object
a; str(a)
#Boolean operators for equality is ==
a == a
#Boolean operators for equality is ==
a == 20
#### Objects
```{r}
#Boolean operators for equality is ==
a == 20
#Functions designed for vectors
sample(a)
#Functions designed for vectors
sample(a)
permn(a)
#Functions designed for vectors
rm(a)
a <- c(1, 2, 3)
sample(a)
#Functions designed for vectors
rm(a)
a <- c(1, 2, 3)
sample(a)
permn(a)
#Functions designed for vectors
rm(a)
a <- c(1, 2, 3)
sample(a)
print("permn()")
permn(a)
#Functions designed for vectors
rm(a)
a <- c(1, 2, 3)
print("sample():")
sample(a)
print("permn():")
permn(a)
print("order():")
order(a)
print("sort():")
sort(a)
#Functions designed for vectors
rm(a)
a <- c(1, 2, 3)
print("sample():")
sample(a)
print("permn():")
permn(a)
print("order():")
order(a)
print("sort():")
sort(a)
#Functions designed for vectors
rm(a)
a <- c(1, 2, 3)
print("sample():")
sample(a)
print("permn():")
permn(a)
print("order():")
order(a)
print("sort():")
sort(a)
help(seq)
help(sort())
help(sort
help(sort)
#Functions designed for vectors
rm(a)
a <- c(1, 2, 3)
print("sample():")
sample(a)
print("permn():")
permn(a)
print("order():")
order(a)
print("sort():")
sort(a, decreasing = F)
#Functions designed for vectors
rm(a)
a <- c(1, 2, 3)
print("sample():")
sample(a)
print("permn():")
permn(a)
print("order():")
order(a)
print("sort():")
sort(a, decreasing = T)
names(a)
names(a)
names(a) <- c("1", "Two", "Tres")
names(a)
names(a) <- c("1", "Two", "Tres")
names(a)
names(a) = NULL
names(a)
names(a) <- c("1", "Two", "Tres")
names(a)
names(a) = NULL
names(a)
names(a) <- c("1", "Two", "Tres")
names(a)
#seq function takes (from, to, by, length)
x <- seq(1, 10, by=2)
x
#seq function takes (from, to, by, length)
x <- seq(1, 10, by=2)
x
x <- seq(1, 10, length.out=20)
#seq function takes (from, to, by, length)
x <- seq(1, 10, by=2)
x
x <- seq(1, 10, length.out=20)
x
#seq function takes (from, to, by, length)
x <- seq(1, 10, by=2)
x
x <- seq(1, 10, length.out=19)
x
#seq function takes (from, to, by, length)
x <- seq(0, 10, by=2)
x
x <- seq(1, 10, length.out=19)
x
#seq function takes (from, to, by, length)
x <- seq(0, 10, by=2)
x
x <- seq(1, 10, length.out=19)
x
rm(x)
#library() function show the available packages
library()
#Packages are installed with install.packages("package name")
#Packages are called with the library function()
library(combinat)
library(datasets)
library(MASS)
library(coda)
library(mcsm)
#Packages are installed with install.packages("package name")
#Packages are called with the library function()
library(combinat)
library(datasets)
library(MASS)
library(coda)
library(mcsm)
#Function c() concatenates terms together, it can concatenate number
#as well as other vectors
a<-c(10, 20, 20, 10)
#Function str() show the structure of an object
a; str(a)
#Boolean operators for equality is ==
a == 20
#Functions designed for vectors
rm(a)
a <- c(1, 2, 3)
print("sample():")
sample(a)
print("permn():")
permn(a)
print("order():")
order(a)
print("sort():")
sort(a, decreasing = T)
names(a) = NULL
names(a)
names(a) <- c("1", "Two", "Tres")
names(a)
a <- c(1:12)
m <- matrix(a, 3, 4, byrow=F)
n <- matrix(a, 4, 3, byrow=T)
m
m[1,]
n
matrix(a, 5, 5)
#Note that the vector can be of different size than np and it will
#either be cut off or have to restart
#seq function takes (from, to, by, length)
x <- seq(0, 10, by=2)
x
x <- seq(1, 10, length.out=19)
x
#Term by termn multiplication
m * m
#Matrix product
m %*% n
#Vector from the diagonal
diag(m)
#It can also create a matrix with a given diagonal
diag(1:5)
#Product with the transpose
crossprod(m, m)
#seq function takes (from, to, by, length)
x <- seq(0, 10, by=2)
x
x <- seq(1, 10, length.out=19)
x
a <- c(1:12)
m <- matrix(a, 3, 4, byrow=F)
n <- matrix(a, 4, 3, byrow=T)
m
m[1,]
n
matrix(a, 5, 5)
#Note that the vector can be of different size than np and it will
#either be cut off or have to restart
#Term by termn multiplication
m * m
#Matrix product
m %*% n
#Vector from the diagonal
diag(m)
#It can also create a matrix with a given diagonal
diag(1:5)
#Product with the transpose
crossprod(m, m)
a<-list(name_1=1,name_n="object_n")
a$name_1
a$name_n
li=list(num=1:5,y="color",a=T)
li
a=matrix(c(6,2,0,2,6,0,0,0,36),nrow=3)
res=eigen(a,symmetric=T)
names(res)
res$values
res$vectors
a
res$vec%*%diag(res$val)%*%t(res$vec)
x <- rnorm(20)
x
print(" ")
y <- 3*x + 5 + rnorm(20, sd=0.3)
y
reslm <- lm(y~x)
summary(reslm)
x <- rnorm(25)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
var(x)
sd(x)
median(x)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
var(x)
sd(x)
median(x)
mean(x)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
summary(x)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
x
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
summary(x)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
x
print("")
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
summary(x)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
x
print("")
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
print("")
summary(x)
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
x
print("")
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
print("")
summary(x)
print("")
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
x
print("")
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
print("")
summary(x)
print("")
t.test(x)
median(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25)
x
print("")
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
print("")
summary(x)
print("")
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(25, 0, 0.5)
x
print("")
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
print("")
summary(x)
print("")
t.test(x)
#rnorm(n, mean=0, sd=1)
x <- rnorm(20, 0, 0.5)
x
print("")
var(x)
sd(x)
median(x)
mean(x)
quantile(x)
print("")
summary(x)
print("")
t.test(x)
x <- seq(-3,3,le=5)
x
x <- seq(-3,3,le=5)
x
y <- 2 + 4*x + rnorm(5)
x <- seq(-3,3,le=5)
x
y <- 2 + 4*x + rnorm(5)
y
x <- seq(-3,3,le=5)
x
y <- 2 + 4*x + rnorm(5)
y
x <- seq(-3,3,le=5)
x
y <- 2 + 4*x + rnorm(5)
lm(y~x)
x <- seq(-3,3,le=5)
x
y <- 2 + 4*x + rnorm(5)
y
lm(y~x)
x <- seq(-3,3,le=5)
x
y <- 2 + 4*x + rnorm(5)
y
a <- lm(y~x)
a
summary(a)
x <- seq(-3,3,le=5)
x
y <- 2 + 4*x + rnorm(5)
y
a <- lm(y~x)
a
print("")
summary(a)
